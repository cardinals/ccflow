using System;
using System.Data;
using BP.DA ; 
using System.Collections;
using BP.En.Base;
using BP.WF;
using BP.Port ; 
using BP.En;
using BP.DTS;
using BP.Tax;

namespace BP.WF.DTS
{
    public class UserPort : DataIOEn2
    {
        /// <summary>
        /// 调度人员,岗位,部门
        /// </summary>
        public UserPort()
        {
            this.HisDoType = DoType.UnName;
            this.Title = "生成流程部门(运行在系统第一次安装时或者管理机关变化时)";
            this.HisRunTimeType = RunTimeType.UnName;
            this.FromDBUrl = DBUrlType.AppCenterDSN;
            this.ToDBUrl = DBUrlType.AppCenterDSN;
        }
        public override void Do()
        {

            //执行调度部门。
            BP.Tax.DTS.GenerDept gd = new BP.Tax.DTS.GenerDept();
            gd.Do();

            // 调度人员信息。
           // Emp emp = new Emp(Web.WebUser.No);
           // emp.DoDTSEmpDeptStation();
        }
    }
    public class InitBookDir : DataIOEn
    {
        /// <summary>
        /// 流程时效考核
        /// </summary>
        public InitBookDir()
        {
            this.HisDoType = DoType.UnName;
            this.Title = "创建文书目录(运行在每次更改文书文号或每年一天)";
            this.HisRunTimeType = RunTimeType.UnName;
            this.FromDBUrl = DBUrlType.AppCenterDSN;
            this.ToDBUrl = DBUrlType.AppCenterDSN;
        }
        /// <summary>
        /// 创建文书目录
        /// </summary>
        public override void Do()
        {

            ZSJGs zsjgs = new ZSJGs();
            QueryObject qo = new QueryObject(zsjgs);
            qo.AddWhere("Grade", " < ", 4);
            qo.DoQuery();

            NodeRefFuncs funcs = new NodeRefFuncs();
            funcs.RetrieveAll();

            string path = SystemConfig.AppSettings["FtpPath"];
            string year = DateTime.Now.Year.ToString();

            if (System.IO.Directory.Exists(path) == false)
                System.IO.Directory.CreateDirectory(path);

            if (System.IO.Directory.Exists(path + "\\\\" + year) == false)
                System.IO.Directory.CreateDirectory(path + "\\\\" + year);


            foreach (ZSJG zsjg in zsjgs)
            {
                if (System.IO.Directory.Exists(path + "\\\\" + year + "\\\\" + zsjg.No) == false)
                    System.IO.Directory.CreateDirectory(path + "\\\\" + year + "\\\\" + zsjg.No);

                foreach (NodeRefFunc func in funcs)
                {
                    if (System.IO.Directory.Exists(path + "\\\\" + year + "\\\\" + zsjg.No + "\\\\" + func.FilePrix) == false)
                        System.IO.Directory.CreateDirectory(path + "\\\\" + year + "\\\\" + zsjg.No + "\\\\" + func.FilePrix);
                }
            }
        }
    }

	/// <summary>
	/// 流程时效考核
	/// </summary>
	public class InitCHOfNode : DataIOEn
	{
		/// <summary>
		/// 流程时效考核
		/// </summary>
        public InitCHOfNode()
        {
            this.HisDoType = DoType.UnName;
            this.Title = "节点时效考核(1,汇总节点工作信息到chofNode．2,对预期的工作追加责任人．3,同步节点状态.)这里可以手工执行它．";
            this.HisRunTimeType = RunTimeType.UnName;
            this.FromDBUrl = DBUrlType.AppCenterDSN;
            this.ToDBUrl = DBUrlType.AppCenterDSN;
        }
		/// <summary>
		/// 流程时效考核
		/// </summary>
        public override void Do()
        {
            DBAccess.RunSQL("delete dszf.zf_dtslog");
            DTSLog log = new DTSLog();
            log.MsgKey = "DSWF_Start";
            log.Note = "开始启动第一阶段调度，为加工程序准备流程数据。";
            log.FK_ZSJG = Web.TaxUser.FK_ZSJG;
            log.Insert();

           // string sql= SqlBuilder.Insert(log);
            //DBAccess.RunSQL(sql);

            //WFDTS.InitFlows(); 
            // WFDTS.InitCHOfNode();

            this.UpdatNodeState();
            WFDTS.InitOne2More();

            log = new DTSLog();
            log.MsgKey = "DSWF_End";
            log.Note = "第一阶段，流程数据准备工作, 调度执行完成。";
            log.FK_ZSJG = Web.TaxUser.FK_ZSJG;
            log.Insert();
        }
        private void UpdatNodeState()
        {
            Nodes nds = new Nodes();
            nds.RetrieveAll(1000);
            string sql="";
            sql = " UPDATE DSWF.WF_CHOFNODE SET DSWF.WF_CHOFNODE.IsMyDeal=0";
            DBAccess.RunSQL(sql);

            sql = "UPDATE DSWF.WF_CHOFNODE SET NODESTATE=0";
            DBAccess.RunSQL(sql);

            foreach (Node nd in nds)
            {
                if (DBAccess.RunSQLReturnValInt("select count(*) from " + nd.PTable) <= 0)
                    continue;

                // 删除不应该出现的数据
                try
                {
                    if (nd.IsCheckNode)
                        sql = "DELETE FROM DSWF.WF_CHOFNODE WHERE WORKID NOT IN (SELECT OID FROM " + nd.PTable + " ) AND FK_NODE='" + nd.NodeID + "'";
                    else
                        sql = "DELETE FROM DSWF.WF_CHOFNODE WHERE WORKID NOT IN (SELECT OID FROM  " + nd.PTable + " ) ";

                    Log.DefaultLogWriteLineError(sql);

                    // DBAccess.RunSQL(sql);
                }
                catch (Exception ex)
                {
                    Log.DefaultLogWriteLineError(ex.Message);
                }

                // 更新节点状态。
                try
                {
                    if (nd.IsCheckNode)
                        sql = " UPDATE DSWF.WF_CHOFNODE  SET DSWF.WF_CHOFNODE.NODESTATE = ( SELECT NODESTATE FROM " + nd.PTable + "  WHERE WF_CHOFNODE.WorkID=" + nd.PTable + ".OID AND NODEID='" + nd.NodeID + "' ) WHERE DSWF.WF_CHOFNODE.FK_NODE='" + nd.NodeID + "'";
                    else
                        sql = " UPDATE DSWF.WF_CHOFNODE  SET DSWF.WF_CHOFNODE.NODESTATE = ( SELECT NODESTATE FROM " + nd.PTable + "  WHERE WF_CHOFNODE.WorkID=" + nd.PTable + ".OID ) WHERE DSWF.WF_CHOFNODE.FK_NODE='" + nd.NodeID + "'";

                    Log.DefaultLogWriteLineError(sql);

                    // DBAccess.RunSQL(sql);
                }
                catch (Exception ex)
                {
                    Log.DefaultLogWriteLineError(ex.Message);
                }

                // 更新是否是我处理的。
                try
                {
                    if (nd.IsCheckNode)
                        sql = "UPDATE WF_CHOFNODE SET WF_CHOFNODE.IsMyDeal=1 WHERE WF_CHOFNODE.WORKID||WF_CHOFNODE.FK_Emp IN (SELECT OID||" + nd.PTable + ".Recorder FROM " + nd.PTable + " WHERE " + nd.PTable + ".NODESTATE=1 AND NODEID='" + nd.NodeID + "' )";
                    else
                        sql = "UPDATE WF_CHOFNODE SET WF_CHOFNODE.IsMyDeal=1 WHERE WF_CHOFNODE.WORKID||WF_CHOFNODE.FK_Emp IN (SELECT OID||" + nd.PTable + ".Recorder FROM " + nd.PTable + " WHERE " + nd.PTable + ".NODESTATE=1 )";

                    Log.DefaultLogWriteLineError(sql);
                    // DBAccess.RunSQL(sql);
                }
                catch (Exception ex)
                {
                    Log.DefaultLogWriteLineError(ex.Message);
                }
            }
        }
	}
    /// <summary>
    /// 流程中应用到的静态方法。
    /// </summary>
    public class WFDTS
    {
        /// <summary>
        /// 流程时效考核(次举是为了处理流程效率低下的问题。巴在流程运行过程中的数据通过此调度运行到这里。)
        /// </summary>
        /// <returns></returns>
        public static string InitCHOfNode()
        {
            Log.DefaultLogWriteLine(LogType.Info, Web.WebUser.Name + "开始调度考核信息:" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            string infoMsg = "", errMsg = "";

            Nodes nds = new Nodes();
            nds.RetrieveAll();

            string fromdatetime = DateTime.Now.Year + "-01-01";
            fromdatetime = "2004-01-01 00:00";
            //string fromdatetime=DateTime.Now.Year+"-01-01 00:00";
            //string fromdatetime=DateTime.Now.Year+"-01-01 00:00";
            string insertSql = "";
            foreach (Node nd in nds)
            {
                if (nd.IsPCNode)  /* 如果是计算机节点.*/
                    continue;

                if (nd.IsCheckNode)
                    continue;

                insertSql = "INSERT INTO WF_CHOfNode ( FK_Node, WorkID, NodeState,  Recorder, Emps,RDT, CDT )"
                    + " "
                    + "  SELECT " + nd.NodeID + " as FK_Node, OID as WorkID, NodeState, Recorder,Emps,RDT,CDT "
                    + "  FROM " + nd.HisWork.EnMap.PhysicsTable
                    + "  WHERE  OID NOT IN ( SELECT WorkID FROM WF_CHOfNode WHERE FK_Node=" + nd.NodeID + " ) ";
                try
                {
                    DBAccess.RunSQL(insertSql);
                }
                catch (Exception ex)
                {
                    Log.DefaultLogWriteLineInfo(insertSql + " " + ex.Message);
                }
            }
            // 加入审核信息。
            //Log.DefaultLogWriteLine(LogType.Info, Web.WebUser.Name + "调度考核信息End"+DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")) ;
            DBAccess.RunSP("WF_UpdateCHOfNode");
            return infoMsg;
        }
        /// <summary>
        /// 流程统计分析
        /// </summary>
        /// <param name="fromDatetime"></param>
        /// <returns></returns>
        public static string InitFlows(string fromDatetime)
        {
            return null; /* 好像这个不再应用它了。*/
            Log.DefaultLogWriteLine(LogType.Info, Web.WebUser.Name + " ################# Start 执行统计 #####################");
            //删除部门错误的流程
            //DBAccess.RunSQL("DELETE WF_BadWF WHERE BadFlag='FlowDeptBad'");
            fromDatetime = "2004-01-01 00:00";

            Flows fls = new Flows();
            fls.RetrieveAll();

            CHOfFlow fs = new CHOfFlow();
            foreach (Flow fl in fls)
            {
                Node nd = fl.HisStartNode;
                try
                {
                    string sql = "INSERT INTO WF_CHOfFlow SELECT OID WorkID, " + fl.No + " as FK_Flow, WFState, ltrim(rtrim(Title)) as Title,ltrim(rtrim(WFLog)) as WFLog, Recorder as FK_Emp,"
                        + " RDT, CDT, 0 as SpanDays,'' FK_Dept,"
                        + "'' as FK_ZSJG,'' AS FK_NY,'' as FK_AP,'' AS FK_ND, '' AS FK_YF, Recorder ,'' as FK_XJ, '' as FK_Station   "
                        + " FROM " + nd.HisWork.EnMap.PhysicsTable + " WHERE RDT>='" + fromDatetime + "' AND OID NOT IN ( SELECT WorkID FROM WF_CHOfFlow  )";
                    DBAccess.RunSQL(sql);
                }
                catch (Exception ex)
                {
                    throw new Exception(fl.Name + "   " + nd.Name + "" + ex.Message);
                }
            }
            DBAccess.RunSP("WF_UpdateCHOfFlow");
            Log.DefaultLogWriteLine(LogType.Info, Web.WebUser.Name + " End 执行统计调度");
            return "";
        }

        /// <summary>
        /// 为了处理，工作预期过错责任的问题。
        /// </summary>
        /// <returns></returns>
        public static string InitOne2More()
        {
             //DoDelete();
            // return "";
            string noInsql = "SELECT FROMND||','||TOND  FROM DSZF.ZF_RATE WHERE FROMND NOT LIKE '%QJC%'";
           // string noInsql = "SELECT FROMND||'@'||TOND FROM DSZF.ZF_RATE";
            DataTable dt_Rate = DBAccess.RunSQLReturnTable(noInsql);
            string zfrates = "";
            foreach (DataRow dr in dt_Rate.Rows)
            {
                zfrates += dr[0].ToString();
            }

            string sql = "";

            #region /* 查询出还没做完但是逾期的情况 */
            sql = "SELECT WorkID, FK_Node, EMPS, COUNT(*) AS NUM FROM WF_CHOFNODE WHERE FK_NODE IN (SELECT NODEID FROM WF_NODE) AND NodeState=0 AND LENGTH(EMPS) > 10 AND SUBSTR(SDT,0,11) < '" + DataType.CurrentData + "' GROUP BY WORKID,FK_NODE,EMPS";
            DataTable dt_no = DBAccess.RunSQLReturnTable(sql);
            foreach (DataRow dr_no in dt_no.Rows)
            {
                int num = int.Parse(dr_no["Num"].ToString());
                if (num > 1)
                {
                    /* 说明这条数据已加工过了 */
                    continue;
                }

                string node = dr_no["FK_Node"].ToString();
                if (IsInit(zfrates, node))
                    continue; /*如果存在里面*/

                string myemps = dr_no["Emps"].ToString();
                string WorkID = dr_no["WorkID"].ToString();
                int fk_node;
                try
                {
                    fk_node = int.Parse(node);
                }
                catch
                {
                    continue;
                }

                // 找到其中的一个Entity.
                CHOfNode cn = new CHOfNode();
                int i = cn.Retrieve(CHOfNodeAttr.WorkId, WorkID, CHOfNodeAttr.FK_Node, fk_node);
                if (i == 0)
                    continue;

                   // throw new Exception("不可能出现的情况。");

                Node nd = new Node();
                nd.NodeID = fk_node;
                nd.RetrieveFromDBSources();

                //NodeExt nd = new NodeExt(fk_node);

                string[] emps = myemps.Split(',');
                foreach (string emp in emps)
                {
                    if (emp == "" || emp == null)
                        continue;

                    if (emp == cn.FK_Emp)
                    {
                        /*如果是已经存在人记录。*/
                        continue;
                    }

                    CHOfNode mycn = new CHOfNode();
                    mycn.Copy(cn);
                    mycn.NodeState = 0;
                    mycn.FK_Emp = emp;
                    mycn.CDT = "无";
                    mycn.CentOfAdd = 0;
                    mycn.CentOfCut = nd.DeductCent;
                    mycn.Cent = 0;
                    mycn.IsMyDeal = false;
                    mycn.Save();
                }
                /*执行扣分*/
                DBAccess.RunSQL("UPDATE WF_CHofNode SET CentOfCut=" + nd.DeductCent + " WHERE FK_Node=" + nd.NodeID + " and workid='" + WorkID + "'");
            }
            #endregion

            #region /* 查询出已经做完但是逾期的情况 */
            sql = "SELECT WorkID, FK_Node,EMPS, COUNT(*) AS NUM FROM WF_CHOFNODE WHERE NodeState=1 AND SUBSTR(SDT,0,11) < '" + DataType.CurrentData + "' GROUP BY WORKID,FK_NODE,EMPS";
            DataTable dt_yes = DBAccess.RunSQLReturnTable(sql);
            foreach (DataRow dr_yes in dt_yes.Rows)
            {
                int num = int.Parse(dr_yes["Num"].ToString());
                if (num > 1)
                {
                    /* 说明这条数据已加工过了 */
                    continue;
                }

                string node = dr_yes["FK_Node"].ToString();
                if (IsInit(zfrates, node))
                    continue; /*如果存在里面*/

                
                if (zfrates.IndexOf(node) >= 0)
                    continue;

                string myemps = dr_yes["Emps"].ToString();
                string WorkID = dr_yes["WorkID"].ToString();
                int fk_node = int.Parse(dr_yes["FK_Node"].ToString());


                // 找到其中的一个Entity.
                CHOfNode cn = new CHOfNode();
                int i = cn.Retrieve(CHOfNodeAttr.WorkId, WorkID, CHOfNodeAttr.FK_Node, fk_node);
                if (i == 0)
                    continue;

                Node nd = new Node(fk_node);

                string[] emps = myemps.Split(',');
                foreach (string emp in emps)
                {
                    if (emp == "" || emp == null)
                        continue;

                    if (emp == cn.FK_Emp)
                    {
                        /*如果是已经存在人记录。*/
                        continue;
                    }

                    CHOfNode mycn = new CHOfNode();
                    mycn.Copy(cn);
                    mycn.FK_Emp = emp;
                    //如果在逾期的情况下已经做完了此工作，那么程序跳出
                    int a = mycn.Retrieve(CHOfNodeAttr.WorkId, WorkID, CHOfNodeAttr.FK_Node, fk_node, CHOfNodeAttr.FK_Emp, mycn.FK_Emp);
                    if (a == 1)
                        continue;
                    mycn.CDT = "无";
                    mycn.NodeState = 0;
                    mycn.CentOfAdd = 0;
                    mycn.CentOfCut = nd.DeductCent;
                    mycn.Cent = 0;
                    mycn.Save();
                }
            }
            #endregion

            return "";
        }
        public static bool IsInit(string zfrates, string node)
        {
            if (zfrates.IndexOf(node + "@") != -1)
                return true;

            if (zfrates.IndexOf(node + ",") != -1)
                return true;

            if (zfrates.IndexOf(node + ";") != -1)
                return true;

            if (zfrates.IndexOf("@" + node) != -1)
                return true;

            return false;
        }
        public static void DoDelete()
        {
            string sql = "SELECT * FROM (SELECT WorkID, FK_Node, EMPS, COUNT(*) AS NUM FROM DSWF.WF_CHOFNODE WHERE LENGTH(EMPS) > 10 GROUP BY WORKID, FK_NODE, EMPS ) WHERE NUM>1 ";
            DataTable dt = DBAccess.RunSQLReturnTable(sql);

            string noInsql = "SELECT FROMND||','||TOND  FROM DSZF.ZF_RATE WHERE FROMND NOT LIKE '%QJC%'";
            DataTable dt_Rate = DBAccess.RunSQLReturnTable(noInsql);
            string zfrates = "";
            foreach (DataRow dr in dt_Rate.Rows)
                zfrates += dr[0].ToString();

            foreach (DataRow dr in dt.Rows)
            {
                int workid = int.Parse(dr["WorkID"].ToString());
                string node = dr["FK_Node"].ToString();

                if (IsInit(zfrates, node))
                    continue;

                int fk_node = int.Parse(node);
                Node nd = new Node(fk_node);
                Work wk = nd.HisWork;

                if (wk.IsCheckWork)
                    wk.SetValByKey(CheckWorkAttr.NodeID, fk_node);
                wk.OID = workid;
                try
                {
                    wk.Retrieve();
                }
                catch
                {
                    continue;
                }

                //sql = "SELECT * FROM  DSWF.WF_CHOFNODE WHERE FK_NODE='"+node+"' AND WORKID='"+workid+"' AND FK_EMP='"+wk.Recorder+"'";
                //if (

                sql = "DELETE DSWF.WF_CHOFNODE WHERE FK_NODE='" + node + "' AND WORKID='" + workid + "' AND FK_EMP!='" + wk.Recorder + "' ";
                //Log.DefaultLogWriteLineInfo(sql);
                DBAccess.RunSQL(sql);
            }

        }
    }

    
     
}
