using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using BP.WF;
using BP.En;
using BP.Port;
using BP.Web.Controls;
using BP.Web;
using BP.Sys;

public partial class WF_Admin_FrmDirection : WebPage
{
    #region 属性
    /// <summary>
    /// 主键
    /// </summary>
    public string MyPK
    {
        get
        {
            return this.Request.QueryString["MyPK"];
        }
    }
    /// <summary>
    /// 流程编号
    /// </summary>
    public string FK_Flow
    {
        get
        {
            return this.Request.QueryString["FK_Flow"];
        }
    }
    public int FK_Attr
    {
        get
        {
            try
            {
                return int.Parse(this.Request.QueryString["FK_Attr"]);
            }
            catch
            {
                return 0;
            }
        }
    }
    /// <summary>
    /// 节点
    /// </summary>
    public int FK_Node
    {
        get
        {
            try
            {
                return int.Parse(this.Request.QueryString["FK_Node"]);
            }
            catch
            {
                return this.FK_MainNode;
            }
        }
    }
    public int FK_MainNode
    {
        get
        {
            return int.Parse(this.Request.QueryString["FK_MainNode"]);
        }
    }
    /// <summary>
    /// 执行类型
    /// </summary>
    public string DirType
    {
        get
        {
            return this.Request.QueryString["DirType"];
        }
    }
    public string GetOperVal
    {
        get
        {
            if (this.Ucsys2.IsExit("TB_Val"))
                return this.Ucsys2.GetTextBoxByID("TB_Val").Text;

            return this.Ucsys2.GetDDLByID("DDL_Val").SelectedItemStringVal;
        }
    }
    public string GetOperValText
    {
        get
        {
            if (this.Ucsys2.IsExit("TB_Val"))
                return this.Ucsys2.GetTextBoxByID("TB_Val").Text;
            return this.Ucsys2.GetDDLByID("DDL_Val").SelectedItem.Text;
        }
    }
    #endregion 属性

    protected void Page_Load(object sender, EventArgs e)
    {
        if (this.Request.QueryString["DoType"] == "Del")
        {
            switch (this.DirType)
            {
                case "BP.WF.NodeCompleteCondition":
                    NodeCompleteCondition nd = new NodeCompleteCondition(this.MyPK);
                    nd.Delete();
                    this.Response.Redirect("Direction.aspx?DirType=" + this.DirType + "&FK_Flow=" + this.FK_Flow + "&FK_MainNode=" + nd.NodeID, true);
                    return;
                case "BP.WF.FlowCompleteCondition":
                    this.Ucsys2.AddCaptionLeftTX("流程完成 条件设计");
                    break;
                case "BP.WF.DirectionCondition":
                    this.Ucsys2.AddCaptionLeftTX("节点方向 条件设计");
                    break;
                default:
                    break;
            }
            return;
        }
       
        this.BindDirection();
    }
    public void BindDirection()
    {
        string msg = "";
        string note = "";

        BP.En.Entity en = BP.DA.ClassFactory.GetEn(this.DirType);
        en.PKVal = this.FK_MainNode;
        en.CheckPhysicsTable();

        int i = en.RetrieveFromDBSources();
        bool isExitConn = true;
        if (i == 0)
            isExitConn = false;

        BP.WF.Condition conn = (Condition)en;
        NodeCompleteCondition nc = en as NodeCompleteCondition;
        if (isExitConn)
            msg = "<b>" + conn.AttrKey + "" + conn.FK_Operator + "" + conn.OperatorValue + "</b>";

        if (nc != null)
        {
            if (isExitConn)
                note = "描述：下面条件满足时工作完成，进入下一步。";
        }

        FlowCompleteCondition fl = en as FlowCompleteCondition;
        if (fl != null)
        {
            if (isExitConn)
                note = "描述：下面条件满足时流程停止运行。";
        }

        DirectionCondition dc = en as DirectionCondition;
        if (dc != null)
        {
            if (isExitConn)
                note = "描述：下面条件满足时方向改变。";
        }

        this.Ucsys2.Clear();
        this.Ucsys2.AddTable();
        switch (this.DirType)
        {
            case "BP.WF.NodeCompleteCondition":
                this.Ucsys2.AddCaptionLeftTX("节点完成 条件设计");
                break;
            case "BP.WF.FlowCompleteCondition":
                this.Ucsys2.AddCaptionLeftTX("流程完成 条件设计");
                break;
            case "BP.WF.DirectionCondition":
                this.Ucsys2.AddCaptionLeftTX("节点方向 条件设计");
                break;
            default:
                break;
        }

        this.Ucsys2.AddTR();
        this.Ucsys2.AddTDTitle("项目");
        this.Ucsys2.AddTDTitle("输入");
        this.Ucsys2.AddTDTitle("说明");
        this.Ucsys2.AddTREnd();

        this.Ucsys2.AddTR();
        this.Ucsys2.AddTD("节点");
        Nodes nds = new Nodes(this.FK_Flow);
        Nodes ndsN = new Nodes();
        foreach (BP.WF.Node mynd in nds)
        {
            if (mynd.IsCheckNode)
                continue;
            ndsN.AddEntity(mynd);
        }
        DDL ddl = new DDL();
        ddl.ID = "DDL_Node";
        ddl.BindEntities(ndsN, "NodeID", "Name");

        ddl.SetSelectItem(this.FK_Node);

        ddl.AutoPostBack = true;
        ddl.SelectedIndexChanged += new EventHandler(ddl_SelectedIndexChanged);

        this.Ucsys2.AddTD(ddl);
        this.Ucsys2.AddTD("节点。");
        this.Ucsys2.AddTREnd();

        // 属性/字段
        MapAttrs attrs = new MapAttrs("ND" + ddl.SelectedItemStringVal);
        MapAttrs attrNs = new MapAttrs();
        foreach (MapAttr attr in attrs)
        {
            if (attr.IsBigDoc)
                continue;

            switch (attr.Key)
            {
                case "Title":
                //case "RDT":
                //case "CDT":
                case "FK_Emp":
                case "NodeState":
                case "BillNo":
                case WorkAttr.Emps:
                case WorkAttr.OID:
                case StartWorkAttr.Rec:
                case StartWorkAttr.WFLog:
                case StartWorkAttr.WFState:
                    continue;
                default:
                    break;
            }
            attrNs.AddEntity(attr);
        }

        ddl = new DDL();
        ddl.ID = "DDL_Attr";
        ddl.BindEntities(attrNs, MapAttrAttr.OID, MapAttrAttr.Name);
        ddl.AutoPostBack = true;
        ddl.SelectedIndexChanged += new EventHandler(ddl_SelectedIndexChanged);
        ddl.SetSelectItem(this.FK_Attr);

        if (attrNs.Count == 0)
        {
            BP.WF.Node nd = new BP.WF.Node(this.FK_Node);
            nd.CreateMap();
            this.Ucsys2.AddTR();
            this.Ucsys2.AddTD("");
            this.Ucsys2.AddTD("colspan=2", "节点没有找到合适的条件");
            this.Ucsys2.AddTREnd();
            return;
        }

        this.Ucsys2.AddTR();
        this.Ucsys2.AddTD("属性/字段");
        this.Ucsys2.AddTD(ddl);
        this.Ucsys2.AddTD("");
        this.Ucsys2.AddTREnd();

        MapAttr attrS = new MapAttr(this.DDL_Attr.SelectedItemIntVal);
        this.Ucsys2.AddTR();
        this.Ucsys2.AddTD("操作符");

        ddl = new DDL();
        ddl.ID = "DDL_Oper";
        switch (attrS.LGType)
        {
            case BP.En.FieldTypeS.Enum:
            case BP.En.FieldTypeS.FK:
                ddl.Items.Add(new ListItem("=", "="));
                break;
            case BP.En.FieldTypeS.Normal:
                switch (attrS.MyDataType)
                {
                    case BP.DA.DataType.AppString:
                        ddl.Items.Add(new ListItem("=", "="));
                        ddl.Items.Add(new ListItem("LIKE", "LIKE"));
                        break;
                    case BP.DA.DataType.AppBoolean:
                        ddl.Items.Add(new ListItem("=", "="));
                        break;
                    default:
                        ddl.Items.Add(new ListItem("=", "="));
                        ddl.Items.Add(new ListItem(">", ">"));
                        ddl.Items.Add(new ListItem(">=", ">="));
                        ddl.Items.Add(new ListItem("<", "<"));
                        ddl.Items.Add(new ListItem("<=", "<="));
                        break;
                }
                break;
            default:
                break;
        }
        if (conn != null)
        {
            try
            {
                ddl.SetSelectItem(conn.OperatorValueInt);
            }
            catch
            {
            }
        }
        this.Ucsys2.AddTD(ddl);
        this.Ucsys2.AddTD("");
        this.Ucsys2.AddTREnd();
        switch (attrS.LGType)
        {
            case BP.En.FieldTypeS.Enum:
                this.Ucsys2.AddTR();
                this.Ucsys2.AddTD("值");
                ddl = new DDL();
                ddl.ID = "DDL_Val";
                ddl.BindSysEnum(attrS.Key);
                if (conn != null)
                {
                    try
                    {
                        ddl.SetSelectItem(conn.OperatorValueInt);
                    }
                    catch
                    {
                    }
                }
                this.Ucsys2.AddTD(ddl);
                this.Ucsys2.AddTD("");
                this.Ucsys2.AddTREnd();
                break;
            case BP.En.FieldTypeS.FK:
                this.Ucsys2.AddTR();
                this.Ucsys2.AddTD("值");
                ddl = new DDL();
                ddl.ID = "DDL_Val";
                ddl.BindEntities(attrS.HisEntitiesNoName);
                if (conn != null)
                {
                    try
                    {
                        ddl.SetSelectItem(conn.OperatorValueStr);
                    }
                    catch
                    {
                    }
                }
                this.Ucsys2.AddTD(ddl);
                this.Ucsys2.AddTD("");
                this.Ucsys2.AddTREnd();
                break;
            default:
                if (attrS.MyDataType == BP.DA.DataType.AppBoolean)
                {
                    this.Ucsys2.AddTR();
                    this.Ucsys2.AddTD("值");
                    ddl = new DDL();
                    ddl.ID = "DDL_Val";
                    ddl.BindAppYesOrNo(0);
                    if (conn != null)
                    {
                        try
                        {
                            ddl.SetSelectItem(conn.OperatorValueInt);
                        }
                        catch
                        {
                        }
                    }
                    this.Ucsys2.AddTD(ddl);
                    this.Ucsys2.AddTD();
                    this.Ucsys2.AddTREnd();
                }
                else
                {
                    this.Ucsys2.AddTR();
                    this.Ucsys2.AddTD("值");
                    TextBox tb = new TextBox();
                    tb.ID = "TB_Val";
                    if (conn != null)
                        tb.Text = conn.OperatorValueStr;
                    this.Ucsys2.AddTD(tb);
                    this.Ucsys2.AddTD();
                    this.Ucsys2.AddTREnd();
                }
                break;
        }

        this.Ucsys2.AddTRSum();
        this.Ucsys2.AddTD("");
        this.Ucsys2.Add("<TD class=TD colspan=2>");

        Button btn = new Button();
        btn.ID = "Btn_Save";
        btn.Text = " 保存 ";
        btn.Click += new EventHandler(btn_Save_Click);
        this.Ucsys2.Add(btn);

        btn = new Button();
        btn.ID = "Btn_New";
        btn.Text = " 新建 ";
        btn.Attributes["onclick"] = " return confirm('您确定要执行删除吗？');";
        btn.Click += new EventHandler(btn_New_Click);
        if (this.MyPK!=null )
            btn.Enabled = true;
        else
            btn.Enabled = false;

        this.Ucsys2.Add(btn);
        this.Ucsys2.Add("</TD>");
        this.Ucsys2.AddTREnd();

        this.Ucsys2.AddTR();
        this.Ucsys2.AddTD("条件描述");
        this.Ucsys2.Add("<TD class=TD colspan=2>");
        Label lab = new Label();
        lab.ID = "Lab_Note";
        lab.Text = note;
        this.Ucsys2.Add(lab);

        lab = new Label();
        lab.ID = "Lab_Msg";
        lab.Text = "<hr>" + msg;
        this.Ucsys2.Add(lab);

        this.Ucsys2.Add("</TD>");
        this.Ucsys2.AddTREnd();
        this.Ucsys2.AddTableEnd();

        this.Ucsys2.AddTable();
        this.Ucsys2.AddTR();
        this.Ucsys2.AddTDTitle("IDX");
        this.Ucsys2.AddTDTitle("节点");
        this.Ucsys2.AddTDTitle("属性");
        this.Ucsys2.AddTDTitle("运算符");
        this.Ucsys2.AddTDTitle("运算值");
        this.Ucsys2.AddTDTitle("操作");
        this.Ucsys2.AddTREnd();
        i = 0;
        switch (this.DirType)
        {
            case "BP.WF.NodeCompleteCondition":
                BP.WF.NodeCompleteConditions nccs = new NodeCompleteConditions();
                nccs.Retrieve(NodeCompleteConditionAttr.FK_Node, this.FK_MainNode);
                foreach (NodeCompleteCondition mync in nccs)
                {
                    i++;
                    this.Ucsys2.AddTR();
                    this.Ucsys2.AddTDIdx(i);
                    this.Ucsys2.AddTD(mync.FK_NodeT);
                    this.Ucsys2.AddTD(mync.FK_AttrT);
                    this.Ucsys2.AddTDCenter(mync.FK_Operator);
                    this.Ucsys2.AddTD(mync.OperatorValueT);
                    this.Ucsys2.AddTD("<a href='Direction.aspx?MyPK=" + mync.MyPK + "&DirType=BP.WF.NodeCompleteCondition&&FK_Flow=" + this.FK_Flow + "&FK_Attr=" + mync.FK_Attr + "&FK_MainNode=" + mync.NodeID + "&OperatorValue=" + mync.OperatorValueStr + "&FK_Node=" + mync.FK_Node + "' >编辑</a>|<a href='Direction.aspx?MyPK=" + mync.MyPK + "&DirType=BP.WF.NodeCompleteCondition&DoType=Del&FK_Flow=" + this.FK_Flow + "' >删除</a>");
                    this.Ucsys2.AddTREnd();
                }
                break;
            case "BP.WF.FlowCompleteCondition":
                this.Ucsys2.AddCaptionLeftTX("流程完成 条件设计");
                break;
            case "BP.WF.DirectionCondition":
                this.Ucsys2.AddCaptionLeftTX("节点方向 条件设计");
                break;
            default:
                break;
        }

        this.Ucsys2.AddTableEnd();
    }
    public DDL DDL_Node
    {
        get
        {
            return this.Ucsys2.GetDDLByID("DDL_Node");
        }
    }
    public Label Lab_Msg
    {
        get
        {
            return this.Ucsys2.GetLabelByID("Lab_Msg");
        }
    }
    public Label Lab_Note
    {
        get
        {
            return this.Ucsys2.GetLabelByID("Lab_Note");
        }
    }
    /// <summary>
    /// 属性
    /// </summary>
    public DDL DDL_Attr
    {
        get
        {
            return this.Ucsys2.GetDDLByID("DDL_Attr");
        }
    }
    public DDL DDL_Oper
    {
        get
        {
            return this.Ucsys2.GetDDLByID("DDL_Oper");
        }
    }
    void ddl_SelectedIndexChanged(object sender, EventArgs e)
    {
        this.Response.Redirect("Direction.aspx?MyPK="+this.MyPK+"&FK_Flow=" + this.FK_Flow + "&FK_Node=" + this.FK_Node + "&FK_MainNode=" + this.FK_MainNode + "&DirType=" + this.DirType + "&FK_Attr=" + this.DDL_Attr.SelectedItemStringVal + "&ToNodeID=" + this.Request.QueryString["ToNodeID"], true);
    }

    void btn_Save_Click(object sender, EventArgs e)
    {
        BP.En.Entity en = BP.DA.ClassFactory.GetEn(this.DirType);
        NodeCompleteCondition nc = en as NodeCompleteCondition;
        MapAttr mattr =  new MapAttr();
        if (this.FK_Attr >0 )
            mattr = new MapAttr(this.FK_Attr);
        if (nc != null)
        {

            nc.NodeID = this.FK_MainNode;
            nc.AttrKey = mattr.Key;
            nc.FK_Attr = this.FK_Attr;
            nc.FK_Node = this.FK_Node;
            nc.FK_Operator = this.DDL_Oper.SelectedItemStringVal;
            nc.OperatorValue = this.GetOperVal;
            nc.OperatorValueT = this.GetOperValText;
            nc.MyPK = nc.NodeID + "_" + nc.FK_Node + "_" + nc.FK_Attr + "_" + nc.OperatorValue;
            if (nc.Update() == 0)
                nc.Insert();
             
            this.Lab_Note.Text = "描述：下面条件满足时工作完成，进入下一步。";
            this.Lab_Msg.Text = "<b>" + mattr.Name + "" + nc.FK_Operator + "" + this.GetOperValText + "</b>";
            ddl_SelectedIndexChanged(null, null);
            return;
        }

        FlowCompleteCondition fl = en as FlowCompleteCondition;
        if (fl != null)
        {
            fl.MyPK = this.MyPK;
            fl.NodeID = this.FK_MainNode;
            fl.AttrKey = mattr.Key;
            fl.FK_Attr = this.FK_Attr;
            fl.FK_Node = this.FK_Node;
            fl.FK_Operator = this.DDL_Oper.SelectedValue.ToString();
            fl.OperatorValue = this.GetOperVal;
            fl.OperatorValueT = this.GetOperValText;
            fl.Save();
 
            this.Lab_Note.Text = "描述：下面条件满足时流程停止运行。";
            this.Lab_Msg.Text = "<b>" + mattr.Name + "" + fl.FK_Operator + "" + this.GetOperValText + "</b>";
            ddl_SelectedIndexChanged(null, null);
            return;
        }

        DirectionCondition dc = en as DirectionCondition;
        if (dc != null)
        {
            dc.CheckPhysicsTable();
            dc.MyPK = this.FK_MainNode + "_" + this.Request.QueryString["ToNodeID"];
            dc.NodeID = this.FK_MainNode;
            dc.ToNodeID = int.Parse(this.Request.QueryString["ToNodeID"]);

            if (dc.RetrieveFromDBSources() == 0)
                dc.Insert();

            dc.NodeID = this.FK_MainNode;
            dc.ToNodeID = int.Parse(this.Request.QueryString["ToNodeID"]);
            dc.NodeID = this.FK_MainNode;
            dc.FK_Node = this.FK_Node;
            dc.FK_Attr = this.FK_Attr;
            dc.AttrKey = mattr.Key;
            dc.FK_Operator = this.DDL_Oper.SelectedValue.ToString();
            dc.OperatorValue = this.GetOperVal;
            dc.OperatorValueT = this.GetOperValText;
            dc.Update();

            this.Lab_Note.Text = "描述：下面条件满足时方向改变。";
            this.Lab_Msg.Text = "<b>" + mattr.Name + "" + dc.FK_Operator + "" + this.GetOperValText + "</b>";
            return;
        }
    }
    void btn_New_Click(object sender, EventArgs e)
    {

        BP.En.Entity en = BP.DA.ClassFactory.GetEn(this.DirType);
        NodeCompleteCondition nc = en as NodeCompleteCondition;
        if (nc != null)
        {
            nc.MyPK = this.MyPK;
            nc.NodeID = this.FK_MainNode;
            nc.Delete();

        }

        FlowCompleteCondition fl = en as FlowCompleteCondition;
        if (fl != null)
        {
            fl.NodeID = this.FK_MainNode;
            fl.MyPK = this.MyPK;
            fl.Delete();
        }

        DirectionCondition dc = en as DirectionCondition;
        if (dc != null)
        {
            dc.MyPK = this.FK_MainNode + "_" + this.Request.QueryString["ToNodeID"];
            dc.MyPK = this.MyPK;
            dc.Delete();
        }

        this.Ucsys1.Clear();
        this.Ucsys2.Clear();

        this.Ucsys2.AddMsgOfInfo("提示", " <br> <br><br><br><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 删除成功。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br> <br><br><br><br> <br> <br><br><br><br>");
        BP.PubClass.WinClose();
    }

}
