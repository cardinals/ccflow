using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Microsoft.Web.UI.WebControls;

using BP.Rpt;
using BP.En;
using BP.En;
using BP.DA;
using BP.Web.Controls ; 


namespace BP.Web.Comm.Rpt
{
	/// <summary>
	/// GEnsNum 的摘要说明。
	/// </summary>
	public class GEnsNum : PageBase
	{
		protected BP.Web.Controls.BPToolBar BPToolBar1;
		protected BP.Web.Controls.BPToolBar BPToolBar2;

		#region attr
		public bool IsChart
		{
			get
			{
				if (this.DDL_D3.SelectedItemStringVal=="rpt")
					return false;
				else
					return true;
			}
		}
		public BP.Web.Comm.Rpt.UCRpt UCRpt1
		{
			get
			{
				return (BP.Web.Comm.Rpt.UCRpt)this.FindControl("UCRpt1");
			}
		}
		/// <summary>
		/// UCGraphics1
		/// </summary>
		public BP.Web.UC.UCGraphics UCGraphics1
		{
			get
			{
				return (BP.Web.UC.UCGraphics)this.FindControl("UCGraphics1");
			}
		}
		/// <summary>
		/// 报表类
		/// </summary>
        public string RptName
        {
            get
            {
                return this.Request.QueryString["RptName"];
            }
        }
		private Rpt2DNum _HisRpt2DNum=null;
		/// <summary>
		/// 报表描述实体。
		/// </summary>
		public Rpt2DNum HisRpt2DNum
		{
			get
			{
				if (_HisRpt2DNum==null)
				{
					try
					{
						//_HisRpt2DNum= (Rpt2DNum)DA.ClassFactory.GetObject("BP.MT.MTInsideRpt") ;
						

						_HisRpt2DNum= (Rpt2DNum)DA.ClassFactory.GetObject(this.RptName) ;

					}
					catch(Exception ex)
					{
						//_HisRpt2DNum = new BP.MT.MTInsideRpt();
						 throw ex;
						//this.Response.Write("class name error"+this.RptName);
						//_HisRpt2DNum = new BP.MT.MTInsideRpt();
						//_HisRpt2DNum = new BP.Port.GSTaxInfoRpt();
						//BP.Port.GSJMSRpt
						//BP.Port.GSJMSRpt();
					}
				}
				return _HisRpt2DNum;
			}
		}
		/// <summary>
		/// 
		/// </summary>
		public ToolbarDDL DDL_D1
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D1");
			}
		}
		public ToolbarDDL DDL_D2
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D2");
			}
		}
		public ToolbarDDL DDL_D3
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_D3");
			}
		}
		#endregion

		public ToolbarTB TB_Width
		{
			get
			{
				return this.BPToolBar1.GetTBByID("TB_Width");
			}
		}
		public ToolbarTB TB_Height
		{
			get
			{
				return this.BPToolBar1.GetTBByID("TB_Height");
			}
		}
		/// <summary>
		/// CB_ShowRate
		/// </summary>
		public ToolbarCB CB_Rate
		{
			get
			{
				
				return this.BPToolBar2.GetToolbarCBByKey("CB_Rate");
			}
		}
	
		private void Page_Load(object sender, System.EventArgs e)
		{
			this.BPToolBar2.ButtonClick += new System.EventHandler(this.BPToolBar2_ButtonClick);

			if (this.IsPostBack==false)
			{
				//this.BPToolBar2.InitByMap(false,HisRpt3D.HisAttrsOfSearch,this.HisRpt3D.HisFKSearchAttrs,null); 
				// 根据
				this.BPToolBar2.InitByMap(HisRpt2DNum.IsShowSearchKey,HisRpt2DNum.HisAttrsOfSearch,this.HisRpt2DNum.HisFKSearchAttrs,null);

				this.BPToolBar1.AddLab("Lab_ChoseD","纬度");
				this.BPToolBar1.AddDDL("DDL_D1", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				this.BPToolBar1.AddLab("Lab_ChoseNum","数值");
				this.BPToolBar1.AddDDL("DDL_D2", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				this.BPToolBar1.AddLab("Lab_ChoseChart","方式");
				this.BPToolBar1.AddDDL("DDL_D3", new System.EventHandler( this.DDL_SelectedIndexChanged ),true);

				this.BPToolBar1.AddLab("Lab_ChoseWidth","宽度");
				this.BPToolBar1.AddTB("TB_Width",4);

				this.BPToolBar1.AddLab("Lab_ChoseHeight","高度");
				this.BPToolBar1.AddTB("TB_Height",4);

				this.TB_Height.Text="500";
				this.TB_Width.Text="800";
				//this.BPToolBar2.AddBtn(NamesOfBtn.Rpt);
				this.BPToolBar2.AddCB("CB_Rate","显示百分比",true,true);
				this.BPToolBar1.AddSpt("sptD1");
				this.BPToolBar1.AddBtn(NamesOfBtn.Help);
				this.BindToolBarDDL();
				this.Bind();
				//this.BindRptOfG();
			}

			this.DDL_D1.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
			this.DDL_D2.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
			this.DDL_D3.SelectedIndexChanged+=new EventHandler(DDL_SelectedIndexChanged);
		}

		/// <summary>
		/// BindToolBarDDL
		/// </summary>
		public void BindToolBarDDL()
		{
			// add 分组列
			ToolbarDDL DDL_D1 = this.BPToolBar1.GetDDLByKey("DDL_D1");
			if (this.HisRpt2DNum.AttrsOfD1.Count==0)
				throw new Exception("分组列的属性不能为0 .");
			foreach(Attr attrDd in this.HisRpt2DNum.AttrsOfD1 )
			{
				DDL_D1.Items.Add( new ListItem(attrDd.Desc,attrDd.Key) );
			}
			 

			// 增加 数值 列 。 
			ToolbarDDL DDL_D2 = this.BPToolBar1.GetDDLByKey("DDL_D2");
			foreach(DAttr attrDd in this.HisRpt2DNum.DAttrs )
			{
				DDL_D2.Items.Add( new ListItem(attrDd.Attr.Desc,attrDd.Attr.Key) );
			}

			ToolbarDDL DDL_D3 = this.BPToolBar1.GetDDLByKey("DDL_D3");		
			DDL_D3.Items.Add( new ListItem("报表","rpt") );	 
			DDL_D3.Items.Add( new ListItem("柱状图","a") );
			DDL_D3.Items.Add( new ListItem("折线图","b") );
			DDL_D3.Items.Add( new ListItem("饼图","c") );
		}

		#region Web 窗体设计器生成的代码
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: 该调用是 ASP.NET Web 窗体设计器所必需的。
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// 设计器支持所需的方法 - 不要使用代码编辑器修改
		/// 此方法的内容。
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion

		private void BPToolBar2_ButtonClick(object sender, System.EventArgs e)
		{
			
			ToolbarButton btn  = (ToolbarButton)sender;
			switch(btn.ID)
			{
				case NamesOfBtn.Help:
					//this.WinOpen("Help.htm");
					break;
				case NamesOfBtn.Search:					
					this.Bind();
					break;
				default:
					this.Bind();
					break;
			}
		}
		public void Bind()
		{
			if (this.IsChart)
			{
				this.BindRptOfG();
			}
			else
			{
				this.BindRptOfTable();
			}
		}
		private void DDL_SelectedIndexChanged(object sender, EventArgs e)
		{
			ToolbarDDL ddl = (ToolbarDDL)sender;
			switch(ddl.ID)
			{
				case "DDL_D1": //删除2，3纬度的中的项目。
					break;
				case "DDL_D2":				 
					break;
				case "DDL_D3":					 
					break;
				case "DDL_D4":					
					break;
				default:
					throw new Exception("error "+ ddl.ID);
			}
			this.Bind();
		}
		public RptEntitiesNoNameWithNum GenerRpt()
		{
			EntitiesNoName d1 = this.HisRpt2DNum.GetDEns( this.DDL_D1.SelectedItemStringVal );
			//d1.RetrieveAll();

			string d1Field=this.HisRpt2DNum.HisEn.EnMap.GetAttrByKey( this.DDL_D1.SelectedItemStringVal).Field  ; 
			string d2Field=this.HisRpt2DNum.HisEn.EnMap.GetAttrByKey( this.DDL_D2.SelectedItemStringVal ).Field  ; 
			string table=this.HisRpt2DNum.HisEn.EnMap.PhysicsTable;

			string sql="";
			string obj="" ; //定义对此列的分析方法。
			DAttr dattr =this.HisRpt2DNum.DAttrs.GetDAttrByKey(this.DDL_D2.SelectedItemStringVal) ; 
			switch(dattr.WorkWay)
			{
				case WorkWay.Sum:
					obj="SUM( "+d2Field+" )";
					break;
				case WorkWay.Avg:
					obj="AVG( "+d2Field+" )";
					break;
				case WorkWay.Count:
					obj="Count( "+d2Field+" )";
					break;
				case WorkWay.Self:
					obj=dattr.Tag;
					break;
				default:
					break;
			}

			sql="SELECT "+d1Field+", "+obj+" FROM "+
				table +" "+this.BPToolBar2.InitTableSqlByEns(this.HisRpt2DNum.HisEns,this.HisRpt2DNum.HisAttrsOfSearch,this.HisRpt2DNum.HisFKSearchAttrs) +
				" GROUP BY "+d1Field;
			//this.Response.Write(sql);
			DataTable dt = DBAccess.RunSQLReturnTable(sql);

			
			//RptEntitiesNoNameWithNum rpt = new RptEntitiesNoNameWithNum(d1,dt,"RptOf3DDtl.aspx");
			RptEntitiesNoNameWithNum rpt = new RptEntitiesNoNameWithNum(d1,dt,"RptOf3D2DDtl.aspx");


			if (dattr.IsCutIfIsZero)
				rpt.CutIsZero();
		
			rpt.LeftTitle = HisRpt2DNum.LeftTitle;
		
			rpt.Title=this.HisRpt2DNum.Title.Replace("@xyer",this.DDL_D2.SelectedItem.Text) ;
			return rpt;
		}
		/// <summary>
		/// 显示报表。
		/// </summary>
		public void BindRptOfTable()
		{
			this.UCRpt1.BindRpt(this.GenerRpt(),this.DDL_D2.SelectedItem.Text,this.CB_Rate.Selected );
		}
		/// <summary>
		/// BindRptOfG
		/// </summary>
		public void BindRptOfG()
		{
			try
			{
				RptEntitiesNoNameWithNum rpt =this.GenerRpt();

				int Height=int.Parse(this.TB_Height.Text) ;
				int width=int.Parse(this.TB_Width.Text) ;
				//rpt.Author=
				rpt.CellUrlTarget="ss";
				rpt.Title=this.HisRpt2DNum.Title.Replace("@xyer",this.DDL_D2.SelectedItem.Text) ;
				if (this.DDL_D3.SelectedItemStringVal=="a")
				{
					this.UCGraphics1.BindHistogram(rpt, width, Height) ;
				}
				else if (this.DDL_D3.SelectedItemStringVal=="b" )
				{
					this.UCGraphics1.BindLine(rpt, width, Height );
				}
				else
				{
					this.UCGraphics1.BindPie(rpt,width, Height);
				}
			}
			catch(Exception ex)
			{
				this.ResponseWriteRedMsg(ex);
			}

		}
	}
}
