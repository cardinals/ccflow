using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using BP.En;
using BP.DA;
using BP.Web;
using BP.Web.Comm;
using BP.Web.Controls;
using BP.Rpt;
using BP.Sys;

public partial class Comm_Rpt_Rpt2D : WebPage
{
    /// <summary>
    /// 分析
    /// </summary>
    public string FX
    {
        get
        {
            return this.Request.QueryString["FX"];
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        string pk = BP.Web.WebUser.No + this.EnsName + "_GroupEnsMNum";
        Entities ens = BP.DA.ClassFactory.GetEns(this.EnsName);
        Entity en = ens.GetNewEntity;

        BP.Sys.UserRegedit ur = new BP.Sys.UserRegedit();
        ur.MyPK = pk;
        ur.Retrieve();
        BP.DA.Paras ps = new Paras();
        ps.SQL = ur.SQL;

        Attrs attrs = en.EnMap.Attrs;
        string[] paras = ur.Paras.Split('@');
        foreach (string para in paras)
        {
            if (para == null)
                continue;
            if (para.Contains("=") == false)
                continue;

            string[] strs = para.Split('=');
            ps.Add(strs[0], strs[1]);
        }

        DataTable dt = BP.DA.DBAccess.RunSQLReturnTable(ps);
        dt = this.DealTable(dt, en);

        string colOfGroupName = "FXGroup";
        string colOfGroupField = "FXGroupT";

        string colOfNumName = en.EnMap.GetAttrByKey(this.FX).Desc;
        string colOfNumField = this.FX;

        this.Title = en.EnDesc + " => 数据分析：" + colOfNumName;

        int chartHeight = 450;
        int chartWidth = 650;
        if (dt.Rows.Count > 20)
        {
            chartWidth = chartWidth + dt.Rows.Count * 5;
        }

        this.Img1.ImageUrl = "../../Temp/" + BP.Web.Comm.UC.UCSys.GenerChart(dt,
                  colOfGroupField, colOfGroupName,
                  colOfNumField, colOfNumName
                  , "", chartHeight, chartWidth, ChartType.Histogram);

        this.Img2.ImageUrl = "../../Temp/" + BP.Web.UC.UCGraphics.GenerChart(dt,
            colOfGroupField, colOfGroupName,
            colOfNumField, colOfNumName
            , "", chartHeight, chartWidth, ChartType.Pie);

        this.Img3.ImageUrl = "../../Temp/" + BP.Web.UC.UCGraphics.GenerChart(dt,
            colOfGroupField, colOfGroupName,
            colOfNumField, colOfNumName
            , "", chartHeight, chartWidth, ChartType.Line);

        // this.BPTabStrip1.Items[1].Text = this.ToE("Histogram", "柱状图");
        // this.BPTabStrip1.Items[2].Text = this.ToE("Pie", "丙图");
        // this.BPTabStrip1.Items[3].Text = this.ToE("Line", "折线图");
    }
    public DataTable DealTable(DataTable dt, Entity en)
    {
        DataTable dt1 = dt.Clone();
        Map map = en.EnMap;
        foreach (DataColumn dc in dt1.Columns)
        {
            Attr attr = map.GetAttrByKey(dc.ColumnName);
            if (attr.IsNum && attr.IsEnum == false)
                continue;

            dt.Columns.Add(dc.ColumnName + "T", typeof(string));
        }

        dt.Columns.Add("FXGroup", typeof(string));
        dt.Columns.Add("FXGroupT", typeof(string));

        foreach (DataColumn dc in dt1.Columns)
        {
            Attr attr = map.GetAttrByKey(dc.ColumnName);
            if (attr.IsNum && attr.IsEnum == false)
                continue;

            if (attr.UIBindKey.IndexOf(".") == -1)
            {
                /*说明它是枚举类型*/
                SysEnums ses = new SysEnums(attr.UIBindKey);
                foreach (DataRow dr in dt.Rows)
                {
                    int val = 0;
                    try
                    {
                        val = int.Parse(dr[attr.Key].ToString());
                    }
                    catch
                    {
                        dr[attr.Key + "T"] = " ";
                        continue;
                    }
                    foreach (SysEnum se in ses)
                    {
                        if (se.IntKey == val)
                        {
                            dr[attr.Key + "T"] = se.Lab;
                            break;
                        }
                    }
                }
                continue;
            }
            foreach (DataRow dr in dt.Rows)
            {
                Entity myen = attr.HisFKEn;
                string val = dr[attr.Key].ToString();
                myen.SetValByKey(attr.UIRefKeyValue, val);
                try
                {
                    myen.Retrieve();
                    dr[attr.Key + "T"] = myen.GetValStrByKey(attr.UIRefKeyText);
                }
                catch (Exception ex)
                {
                    if (val == null || val.Length <= 1)
                    {
                        dr[attr.Key + "T"] = val;
                    }
                    else if (val.Substring(0, 2) == "63")
                    {
                        try
                        {
                            BP.Port.Dept Dept = new BP.Port.Dept(val);
                            dr[attr.Key + "T"] = Dept.Name;
                        }
                        catch
                        {
                            dr[attr.Key + "T"] = val;
                        }
                    }
                    else
                    {
                        dr[attr.Key + "T"] = val;
                    }
                }
            }
        }

        foreach (DataRow mydr in dt.Rows)
        {
            string FXGroup = "";
            string FXGroupT = "";
            foreach (DataColumn dc in dt1.Columns)
            {
                Attr attr = map.GetAttrByKey(dc.ColumnName);
                if (attr.IsNum && attr.IsEnum == false)
                    continue;

                FXGroup += "." + mydr[dc.ColumnName].ToString();
                FXGroupT += "." + mydr[dc.ColumnName + "T"].ToString();
            }
            //mydr["FXGroup"] = FXGroup.Substring(1);
            //mydr["FXGroupT"] = FXGroupT.Substring(1);

            mydr["FXGroup"] = FXGroup;
            mydr["FXGroupT"] = FXGroupT;

            //  mydr["FXGroup"] = FXGroup.Substring(1,FXGroup.Length);
            // mydr["FXGroupT"] = FXGroupT.Substring(1, FXGroupT.Length);

            // mydr["FXGroupT"] = FXGroupT.Substring(1);

            //try
            //{
            //    mydr["FXGroup"] = FXGroup.Substring(1);
            //}
            //catch
            //{
            //}
            //try
            //{
            //    mydr["FXGroupT"] = FXGroupT.Substring(1);
            //}
            //catch
            //{
            //}
        }
        return dt;
    }
}
