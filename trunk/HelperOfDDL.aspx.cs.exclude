using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using BP.En;
using BP.En;
using BP.DA;
using BP.Web.Controls;
using BP.Sys;
 using Microsoft.Web.UI.WebControls;

namespace BP.Web.Comm.UI
{
	/// <summary>
	/// UIEn1ToM 的摘要说明。
	/// </summary>
	public partial class HelperOfDDL1 : WebPage
	{

		#region 属性.		
		public AttrOfOneVSM AttrOfOneVSM 
		{
			get
			{
				Entity en = ClassFactory.GetEn(this.EnsName) ;

				foreach(AttrOfOneVSM attr in en.EnMap.AttrsOfOneVSM)
				{
					if (attr.EnsOfMM.ToString()==this.AttrKey)
					{
						return attr;
					}
				}
				throw new Exception("错误没有找到属性． "); 
			}
		}
		/// <summary>
		/// 一的工作类
		/// </summary>
		public string EnsName
		{
			get
			{			 
				return this.Request.QueryString["EnsName"]  ; 
			}
		}
		public string AttrKey
		{
			get
			{
				return this.Request.QueryString["AttrKey"]  ; 
			}
		}
		public new string PK
		{
			get
			{
				if (ViewState["PK"]==null)
				{
					if (this.Request.QueryString["PK"]!=null)
					{
						ViewState["PK"]=this.Request.QueryString["PK"];
					}
					else
					{
						Entity mainEn=DA.ClassFactory.GetEn( this.EnsName ) ;
						ViewState["PK"]=this.Request.QueryString[mainEn.PK];
					}
				}
				return (string)ViewState["PK"];
			}
		}
		public ToolbarDDL  DDL_Group
		{
			get
			{
				return this.BPToolBar1.GetDDLByKey("DDL_Group");
			}
		}
		 
		#endregion	

		public bool IsLine
		{
			get
			{
				try
				{
					return (bool)ViewState["IsLine"];
				}
				catch
				{
					return false;
				}
			}
			set
			{
				ViewState["IsLine"]=value;
			}
		}

		protected void Page_Load(object sender, System.EventArgs e)
		{
			if (this.IsPostBack==false)
			{	
				//this.GenerLabel(this.Label1,"数据快速选择");
				Entities ens = DA.ClassFactory.GetEns(this.Request.QueryString["EnsName"] );
				Entity en =ens.GetNewEntity; // = DA.ClassFactory.GetEns(this.Request.QueryString["EnsName"] );
				this.BPToolBar1.AddLab("lab_desc","分组依据");
				// 加入分组功能edit by peng 2006-01-12. 
				this.BPToolBar1.AddDDL("DDL_Group",true);

				Map map  = en.EnMap;
				// 先加入enum 类型。
				foreach(Attr attr in map.Attrs)
				{
					/* map */
					if (attr.MyFieldType!=FieldType.Enum)
						continue;
					this.DDL_Group.Items.Add(new ListItem(attr.Desc,attr.Key ));
				}

				foreach(Attr attr in map.Attrs)
				{
					/* map */
					if (attr.MyFieldType!=FieldType.FK)
						continue;
					this.DDL_Group.Items.Add(new ListItem(attr.Desc,attr.Key ));
				}

				this.DDL_Group.Items.Add(new ListItem("无","无"));
				this.BPToolBar1.AddSpt("spt");
				this.BPToolBar1.AddBtn(NamesOfBtn.Confirm);
				this.BPToolBar1.AddSpt("spt1");
				this.BPToolBar1.AddBtn(NamesOfBtn.Close);


			}

			this.DDL_Group.SelectedIndexChanged+=new EventHandler(DDL_Group_SelectedIndexChanged);
			this.BPToolBar1.ButtonClick+=new EventHandler(BPToolBar1_ButtonClick);
			this.SetDataV2();
		}
		public string RefKey
		{
			get
			{
				return this.Request.QueryString["RefKey"];
			}
		}
		public string RefText
		{
			get
			{
				return this.Request.QueryString["RefText"];
			}
		}
		public void SetDataV2()
		{
			Entities ens = DA.ClassFactory.GetEns(this.Request.QueryString["EnsName"] );
			ens.RetrieveAll();
			Entity en = ens.GetNewEntity;
			if (this.DDL_Group.SelectedItemStringVal=="无")
			{
				foreach(Entity myen in ens)
				{
					RadioBtn rb = new RadioBtn();
					rb.GroupName="dsfsd";
					rb.Text=myen.GetValStringByKey( this.RefText);
					rb.ID="RB_"+myen.GetValStringByKey(this.RefKey) ; 

					string clientscript = "window.returnValue = '"+myen.GetValStringByKey(this.RefKey)+"';window.close();";
					rb.Attributes["ondblclick"]=clientscript;

					this.UCSys1.Add(rb);
					this.UCSys1.Add("<BR>");
				}
				return;
			}

			string key=this.DDL_Group.SelectedItemStringVal;
			Attr attr = en.EnMap.GetAttrByKey( key );
			if (attr.MyFieldType ==FieldType.Enum ||  attr.MyFieldType ==FieldType.PKEnum)
			{
				SysEnums ses = new SysEnums(attr.Key);
				this.UCSys1.AddTable(); //("<TABLE border=1 >"); 
				foreach(SysEnum se in ses)
				{

					this.UCSys1.Add("<TR><TD class='TitleLeft' >");
					this.UCSys1.Add(se.Lab);
					this.UCSys1.Add("</TD></TR>");
					
					this.UCSys1.Add("<TR><TD>");
					
					#region add dtl 
					this.UCSys1.AddTable();
					int i =-1;
					foreach(Entity myen in ens)
					{
						if (myen.GetValIntByKey( attr.Key)!=se.IntKey)
							continue;

						i++;
						if (i==3)
							i=0;
						if (i==0)
							this.UCSys1.Add("<TR>");

						RadioBtn rb = new RadioBtn();
						rb.GroupName="dsfsd";
						rb.Text=myen.GetValStringByKey( this.RefText);
						rb.ID="RB_"+myen.GetValStringByKey(this.RefKey) ; 

						string clientscript = "window.returnValue = '"+myen.GetValStringByKey(this.RefKey)+"';window.close();";
						rb.Attributes["ondblclick"]=clientscript;
						this.UCSys1.AddTD(rb);

						if (i==2)
							this.UCSys1.Add("</TR>");
					}
					this.UCSys1.Add("</TABLE>"); 
					#endregion add dtl.

					this.UCSys1.Add("</TD></TR>");
				}
				this.UCSys1.Add("</TABLE>"); 
				return ;
			}


			if (attr.MyFieldType ==FieldType.FK ||  attr.MyFieldType ==FieldType.PKFK )
			{
				Entities groupens = ClassFactory.GetEns(attr.UIBindKey);
				groupens.RetrieveAll();

				this.UCSys1.AddTable(); //("<TABLE border=1 >"); 
				if (groupens.Count >19 )
				{
					this.UCSys1.Add("<TR><TD class='TitleLeft' ><img src='../Images/Home.gif' border=0 />数据选择导航&nbsp;&nbsp;&nbsp;<font size='2'>提示:点分组连接就可到达分组数据</font></TD></TR>");

					this.UCSys1.Add("<TR><TD>");
					this.UCSys1.AddTable();
					/* 显示导航信息 */
					int i = 0 ;
					foreach(Entity groupen in groupens)
					{
						i++;
						this.UCSys1.Add("<TR>");
						this.UCSys1.AddTDIdx( i );
						this.UCSys1.AddTD( "<a href='#ID"+groupen.GetValStringByKey(attr.UIRefKeyValue )+"' >&nbsp;&nbsp;"+groupen.GetValStringByKey( attr.UIRefKeyText ) +"</a><BR>" );
						this.UCSys1.Add("</TR>");
					}
					this.UCSys1.Add("</Table>");
					this.UCSys1.Add("</TD></TR>");
				}

				foreach(Entity groupen in groupens)
				{
					this.UCSys1.Add("<TR><TD class='TitleLeft' >");
					this.UCSys1.Add( "<a href='#top' name='ID"+groupen.GetValStringByKey(attr.UIRefKeyValue)+"' ><Img src='../Images/Top.gif' border=0 /></a>&nbsp;&nbsp;"+groupen.GetValStringByKey( attr.UIRefKeyText ) );
					this.UCSys1.Add("</TD></TR>");

					this.UCSys1.Add("<TR><TD>");

					#region add info .
					this.UCSys1.AddTable();
					int i =-1;
					foreach(Entity myen in ens)
					{
						if (myen.GetValStringByKey( attr.Key  )!=groupen.GetValStringByKey( attr.UIRefKeyValue ) )
							continue;

						i++;
						if (i==3)
							i=0;

						if (i==0)
							this.UCSys1.Add("<TR>");

						RadioBtn rb = new RadioBtn();
						rb.GroupName="dsfsd";
						rb.Text=myen.GetValStringByKey( this.RefText);
						rb.ID="RB_"+myen.GetValStringByKey(this.RefKey); 

						string clientscript = "window.returnValue = '"+myen.GetValStringByKey(this.RefKey)+"';window.close();";
						rb.Attributes["ondblclick"]=clientscript;
						this.UCSys1.AddTD(rb);

						if (i==2)
							this.UCSys1.Add("</TR>");
					}

					this.UCSys1.Add("</Table>");
					#endregion add info .



					this.UCSys1.Add("</TD></TR>");
				}
				this.UCSys1.Add("</TABLE>"); 
			}
		}
		 
		 
		 
		private void BPToolBar1_ButtonClick(object sender, System.EventArgs e)
		{
			ToolbarBtn  btn = (ToolbarBtn)sender;
			switch(btn.ID)
			{
				case NamesOfBtn.Confirm:
					Entities ens = DA.ClassFactory.GetEns(this.Request.QueryString["EnsName"] );
					ens.RetrieveAll();
					foreach(Entity en in ens)
					{
						RadioBtn rb = (RadioBtn)this.UCSys1.FindControl("RB_"+en.GetValStringByKey(this.RefKey) );
						if (rb.Checked==false)
							continue;

						string clientscript = "<script language='javascript'> window.returnValue = '"+en.GetValStringByKey(this.RefKey)+"'; window.close(); </script>";
						this.Page.Response.Write(clientscript);
						return ;
					}
					break;
				case NamesOfBtn.Close:
					this.WinClose();
					break;
				default:
					throw new Exception("no casne . ");
			}
		}

		#region 操作 
		public void EditMEns()
		{
			this.WinOpen(this.Request.ApplicationPath+"/Comm/UIEns.aspx?EnsName="+this.AttrOfOneVSM.EnsOfM.ToString());
		}
		public void Save()
		{

			AttrOfOneVSM attr = this.AttrOfOneVSM ;			 
			Entities ensOfMM = attr.EnsOfMM;
			QueryObject qo = new QueryObject(ensOfMM);
			qo.AddWhere(attr.AttrOfOneInMM,this.PK);
			qo.DoQuery();
			ensOfMM.Delete();  // 删除以前保存得数据。

			AttrOfOneVSM attrOM = this.AttrOfOneVSM;
			Entities ensOfM = attrOM.EnsOfM;
			ensOfM.RetrieveAll();
			foreach(Entity en in ensOfM)
			{
				string pk = en.GetValStringByKey( attr.AttrOfMValue ); 
				CheckBox cb = (CheckBox)this.UCSys1.FindControl("CB_"+ pk );
				if (cb.Checked==false)
					continue;

				Entity en1 =ensOfMM.GetNewEntity;
				en1.SetValByKey(attr.AttrOfOneInMM,this.PK);
				en1.SetValByKey(attr.AttrOfMInMM,  pk  );
				en1.Insert();
			}

			Entity enP = DA.ClassFactory.GetEn(this.Request.QueryString["EnsName"] );
			if (enP.EnMap.EnType!=EnType.View)
			{
				enP.SetValByKey(enP.PK, this.PK) ;// =this.PK;
				enP.Retrieve(); //查询。
				enP.Update(); // 执行更新，处理写在 父实体 的业务逻辑。
			}
		}
		#endregion 

		#region Web 窗体设计器生成的代码
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: 该调用是 ASP.NET Web 窗体设计器所必需的。
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// 设计器支持所需的方法 - 不要使用代码编辑器修改
		/// 此方法的内容。
		/// </summary>
		private void InitializeComponent()
		{    

		}
		#endregion

		private void DDL_Group_SelectedIndexChanged(object sender, EventArgs e)
		{
			this.SetDataV2();

		}
	}
}
